package com.trilogy.dcm.test;

import static org.junit.Assert.*;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.NoAlertPresentException;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;

public class WebDriverHelper {

    private static final Logger LOGGER = Logger.getLogger(Thread.currentThread().getStackTrace()[0].getClassName());

    public static void selectFrame(WebDriver driver, String... frames) {
        driver.switchTo().defaultContent();

        for (String frame : frames) {
            driver.switchTo().frame(frame);
        }
    }

    public static void configDriver(WebDriver driver) {
        driver.manage().timeouts().implicitlyWait(WebDriverConfig.getTimeoutInSeconds(), TimeUnit.SECONDS);
    }

    public static WebDriver buildRemoteDriver(DesiredCapabilities capability) {
        try {
            WebDriver driver = new RemoteWebDriver(new URL(WebDriverConfig.getRemoteUrl()), capability);
            configDriver(driver);
            return driver;
        }
        catch (MalformedURLException e) {
            // This error should not happen
            LOGGER.log(Level.SEVERE, e.getMessage(), e);
            throw new RuntimeException(e);
        }
    }

    public static WebDriver buildRemoteFirefoxDriver() {
        return buildRemoteDriver(DesiredCapabilities.firefox());
    }

    public static WebDriver buildFirefoxDriver() {
        WebDriver driver = new FirefoxDriver();
        configDriver(driver);
        return driver;
    }

    public static WebDriver buildRemoteChromeDriver() {
        return buildRemoteDriver(DesiredCapabilities.chrome());
    }

    public static WebDriver buildChromeDriver() {
        WebDriver driver = new ChromeDriver();
        configDriver(driver);
        return driver;
    }

    public static WebDriver buildRemoteInternetExplorerDriver() {
        return buildRemoteDriver(DesiredCapabilities.internetExplorer());
    }

    public static WebDriver buildInternetExplorerDriver() {
        WebDriver driver = new InternetExplorerDriver();
        configDriver(driver);
        return driver;
    }

    public static WebDriver buildDefaultRemoteDriver() {
        return buildRemoteChromeDriver();
    }

    public static WebDriver buildDefaultDriver() {
        return buildChromeDriver();
    }

    /**
     * Generated by Selenium IDE.
     * 
     * @param driver
     * @param by
     * @return
     */
    public static boolean isElementPresent(WebDriver driver, By by) {
        try {
            driver.findElement(by);
            return true;
        }
        catch (NoSuchElementException e) {
            return false;
        }
    }

    /**
     * Generated by Selenium IDE.
     * 
     * @param driver
     * @return
     */
    public static boolean isAlertPresent(WebDriver driver) {
        try {
            driver.switchTo().alert();
            return true;
        }
        catch (NoAlertPresentException e) {
            return false;
        }
    }

    /**
     * Generated by Selenium IDE. Modified by Linh Bui.
     * 
     * @param driver
     * @param acceptNextAlert
     * @return
     */
    public static String closeAlertAndGetItsText(WebDriver driver, boolean acceptNextAlert) {
        Alert alert = driver.switchTo().alert();
        String alertText = alert.getText();
        if (acceptNextAlert) {
            alert.accept();
        }
        else {
            alert.dismiss();
        }
        return alertText;
    }

    /**
     * Generated by Selenium IDE. Modified by Linh Bui.
     * 
     * @param driver
     * @return
     */
    public static String closeAlertAndGetItsText(WebDriver driver) {
        return closeAlertAndGetItsText(driver, true);
    }

    public static void setText(WebDriver driver, By by, String text) {
        driver.findElement(by).clear();
        driver.findElement(by).sendKeys(text);
    }

    public static void setText(WebElement element, By by, String text) {
        element.findElement(by).clear();
        element.findElement(by).sendKeys(text);
    }

    public static void setSelected(WebDriver driver, By by, boolean selected) {
        if (selected ^ driver.findElement(by).isSelected()) {
            driver.findElement(by).click();
        }
    }

    public static void setSelected(WebElement element, By by, boolean selected) {
        if (selected ^ element.findElement(by).isSelected()) {
            element.findElement(by).click();
        }
    }

    public static void assertNotExists(WebDriver driver, By by) {
        try {
            // This should be faster than findElements
            driver.findElement(by);
            fail(("Element should not exist! by = " + by));
        }
        catch (NoSuchElementException e) {
            // Do nothing
        }
    }

    public static void assertNotExists(WebElement element, By by) {
        try {
            // This should be faster than findElements
            element.findElement(by);
            fail(("Element should not exist! by = " + by));
        }
        catch (NoSuchElementException e) {
            // Do nothing
        }
    }

    public static void assertExists(WebDriver driver, String text) {
        try {
            // This should be faster than findElements
            // Another approach is driver.getPageSource().contains(text)
            driver.findElement(By.xpath("//*[contains(text(),'" + text + "')]"));
        }
        catch (NoSuchElementException e) {
            fail(("Text should exist! text = " + text));
        }
    }

    public static void assertExists(WebElement element, String text) {
        try {
            // This should be faster than findElements
            // Another approach is driver.getPageSource().contains(text)
            element.findElement(By.xpath("//*[contains(text(),'" + text + "')]"));
        }
        catch (NoSuchElementException e) {
            fail(("Text should exist! text = " + text));
        }
    }

    public static void clickByReturnKey(WebDriver driver, By by) {
        // http://stackoverflow.com/a/19763087
        // There is a third type of cause, which is that your element is wrapped
        // in a div or a span. The page can be fully loaded, and completely
        // within the viewport, but Chromedriver will refuse to click it, where
        // the webdriver for FF and IE have no issue. A real human has no clue
        // that the span exists, and the browser doesn't care when you actually
        // click it, as a human. Neither moving around, nor waiting will solve
        // this issue; either avoid Chrome/chromedriver, or rewrite the page's
        // HTML seem to be the only options for people in case 3.
        driver.findElement(by).sendKeys(Keys.RETURN);
    }

    public static void clickByReturnKey(WebElement element, By by) {
        // See clickByReturnKey(WebDriver, By)
        element.findElement(by).sendKeys(Keys.RETURN);
    }

    public static void clickByAction(WebDriver driver, By by) {
        // http://stackoverflow.com/a/19763087
        WebElement element = driver.findElement(by);
        Actions actions = new Actions(driver);
        actions.moveToElement(element).click().perform();
    }

    public static void clickByJSExecutor(WebDriver driver, By by) {
        // http://stackoverflow.com/a/19763087
        WebElement element = driver.findElement(by);
        JavascriptExecutor jse = (JavascriptExecutor) driver;
        jse.executeScript("arguments[0].scrollIntoView()", element);
    }

    public static void dispose(WebDriver driver, By by) {
        JavascriptExecutor js = (JavascriptExecutor) driver;
        List<WebElement> elements = driver.findElements(by);

        for (WebElement element : elements) {
            js.executeScript("arguments[0].setAttribute('style', 'display: none;')", element);
        }
    }

    private WebDriverHelper() {
    }

}
